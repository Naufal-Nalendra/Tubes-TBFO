Start:
START

Terminals:
.
,
+
-
*
/
\
^
[
]
{
}
(
)
'
"
:
;
=
!
>
<
%
~
&
break	
const	
case	
catch	
continue
default	
delete	
else	
false	
finally
for	
function	
if	
let	
null
return	
switch	
throw	
try	
true
var	
while			

Groups:
name = (a-z+A-Z+\_)(a-z+A-Z+\_+0-9)*
number = (0-9)(0-9)*

Rules:
// MAIN

// SYMBOLS
DOT -> .
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVISION -> /
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET -> ]
OPEN_CURLY_BRACKET -> {
CLOSE_CURLY_BRACKET -> }
OPEN_NORMAL_BRACKET -> (
CLOSE_NORMAL_BRACKET -> )
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
COLON -> :
SEMICOLON -> ;
COMMA -> ,
SPACE -> SPACE SPACE
OR_SYM -> or
BANG_SYM -> !
GT_SYM -> <
LT_SYM -> > 
EQ_SYM -> =
TILDE_SYM -> ~
PERCENT_SYM -> %
CARET_SYM -> ^
BACKSLASH -> \
AMPERSAND -> &

// Condition
IF -> if
ELIF -> else if
ELSE -> else
FOR -> for
SWITCH -> switch

// LOOP FOR
FOR -> for
FOR_HEADER -> FOR FOR_VARIABLE IN ITERABLE COLON 
FOR_TEXTED -> FOR_HEADER LOOP_TEXTED
FOR_VARIABLE -> VARIABLE | VARIABLE COMMA FOR_VARIABLE
ITERABLE -> VARIABLE | FUNCTION | METH_TEXTED | DICT | STRING | LIST 
IN -> in

// LOOP WHILE
WHILE -> while


// OTHER LOOP
CONTINUE -> continue 
BREAK -> break 


// PASS
PASS -> pass

// DEF
DEF -> function

// RETURN
RETURN -> return

// STRING
STRING_TEXT -> string | AS | IMPORT | FOR | IF | RAISE | WITH | FROM | BREAK | PASS | CONTINUE | ELIF | ELSE | IN | AND | OR | TRUE | FALSE | STRING_TEXT STRING_TEXT | DOT | MINUS | PLUS | COMMA | MULTIPLY | DIVISION | COMMA | ART_OP | ASS_OP | REL_OP | OPEN_NORMAL_BRACKET | OPEN_CURLY_BRACKET | OPEN_SQUARE_BRACKET | CLOSE_CURLY_BRACKET | CLOSE_NORMAL_BRACKET | CLOSE_SQUARE_BRACKET | COLON | SEMICOLON | BACKSLASH | BANG_SYM
STRING_WITH_QUOTES -> DOUBLE_QUOTE STRING_TEXT DOUBLE_QUOTE | SINGLE_QUOTE STRING_TEXT SINGLE_QUOTE


// COMMENT
COMMENT -> slash slash

// AND OR NOT
AND -> ampersand ampersand
OR -> | |
NOT -> !
IS -> ===

// TRUE FALSE NONE
TRUE -> true
FALSE -> false

// FUNCTION
FUNCTION -> FUNCTION_BASE | FUNCTION_BASE VAR_IDX
FUNCTION_BASE -> VARIABLE OPEN_NORMAL_BRACKET FUNCTION_PARAM CLOSE_NORMAL_BRACKET | VARIABLE OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET
FUNCTION_PARAM -> FUNCTION_PARAM COMMA FUNCTION_PARAM | VARIABLE | CONSTANT | STRING | LIST | DICT | NONE | FUNCTION | METH_TEXTED | ART_OPERATION | COND_OPERATION | ASS_OPERATION

// DICT
DICT -> OPEN_CURLY_BRACKET DICT_TEXTED CLOSE_CURLY_BRACKET | OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET
DICT_TEXTED -> DICT_TYPE COMMA DICT_TYPE | DICT_TYPE
DICT_TYPE -> DICT_TYPES COLON DICT_TYPES
DICT_TYPES -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | NONE

// LIST
LIST -> OPEN_SQUARE_BRACKET LIST_TEXTED CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET
LIST_TYPE -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | LIST | DICT | NONE
LIST_TEXTED -> LIST_TYPE | LIST_TEXTED COMMA LIST_TYPE | LIST_TYPE FOR VARIABLE IN FUNCTION

// ASSIGNMENT OPERATION
ASS_DESTRUCTURE -> VARIABLE COMMA VARIABLE | ASS_DESTRUCTURE COMMA VARIABLE
ASS_OPERATION -> VARIABLE ASS_OPERATOR ASS_OPERAND | ASS_DESTRUCTURE ASS_OPERATOR ASS_OPERAND
ASS_OPERATOR -> ASS_OP
ASS_OPERAND -> OPEN_NORMAL_BRACKET ASS_OPERAND CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// ARITHMETIC OPERATION
ART_OPERATION -> OPEN_NORMAL_BRACKET ART_OPERATION CLOSE_NORMAL_BRACKET | ART_OPERATION ART_OPERATOR ART_OPERATION | ART_OPERAND
ART_OPERATOR -> ART_OP | BIT_OP
ART_OPERAND -> VARIABLE | CONSTANT | METH_TEXTED | FUNCTION

// RAISE
RAISE -> raise
RAI_OP -> RAISE RAI_BODY
RAI_BODY -> OPEN_NORMAL_BRACKET RAI_BODY CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// IMPORT
IMPORT -> import
IMP_OPERATION -> FROM IMP_TEXTED IMPORT IMPT_MOD | IMPORT IMP_TEXTED | IMPORT AS_BLOCK
AS_BLOCK -> AS_BLOCK COMMA AS_BLOCK | IMP_TEXTED AS NAME
IMP_TEXTED -> IMP_TEXTED DOT IMP_TEXTED | NAME
IMPT_MOD -> NAME | ALL | AS_BLOCK | IMPT_MOD COMMA IMPT_MOD

// METHOD
METH_TEXTED -> METH_INIT DOT METH_TEXTED | METH_BACK_FUNC | METH_BACK_NAME
METH_TEXTED_NAME -> METH_INIT DOT METH_TEXTED_NAME | METH_BACK_NAME
METH_TEXTED_FUNC -> METH_INIT DOT METH_TEXTED_FUNC | METH_BACK_FUNC
METH_INIT -> OPEN_NORMAL_BRACKET METH_INIT CLOSE_NORMAL_BRACKET | METH_BACK_FUNC | METH_BACK_NAME
METH_BACK_FUNC -> FUNCTION | FUNCTION VAR_IDX
METH_BACK_NAME -> NAME | NAME VAR_IDX
